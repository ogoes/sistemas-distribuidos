// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: red.proto

#ifndef PROTOBUF_INCLUDED_red_2eproto
#define PROTOBUF_INCLUDED_red_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_red_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_red_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_red_2eproto();
class Aluno;
class AlunoDefaultTypeInternal;
extern AlunoDefaultTypeInternal _Aluno_default_instance_;
class AlunosRequest;
class AlunosRequestDefaultTypeInternal;
extern AlunosRequestDefaultTypeInternal _AlunosRequest_default_instance_;
class AlunosResponse;
class AlunosResponseDefaultTypeInternal;
extern AlunosResponseDefaultTypeInternal _AlunosResponse_default_instance_;
class Curso;
class CursoDefaultTypeInternal;
extern CursoDefaultTypeInternal _Curso_default_instance_;
class Disciplina;
class DisciplinaDefaultTypeInternal;
extern DisciplinaDefaultTypeInternal _Disciplina_default_instance_;
class DisciplinaRequest;
class DisciplinaRequestDefaultTypeInternal;
extern DisciplinaRequestDefaultTypeInternal _DisciplinaRequest_default_instance_;
class DisciplinaResponse;
class DisciplinaResponseDefaultTypeInternal;
extern DisciplinaResponseDefaultTypeInternal _DisciplinaResponse_default_instance_;
class Matricula;
class MatriculaDefaultTypeInternal;
extern MatriculaDefaultTypeInternal _Matricula_default_instance_;
class MatriculaRequest;
class MatriculaRequestDefaultTypeInternal;
extern MatriculaRequestDefaultTypeInternal _MatriculaRequest_default_instance_;
class MatriculaResponse;
class MatriculaResponseDefaultTypeInternal;
extern MatriculaResponseDefaultTypeInternal _MatriculaResponse_default_instance_;
class NotaRequest;
class NotaRequestDefaultTypeInternal;
extern NotaRequestDefaultTypeInternal _NotaRequest_default_instance_;
class NotaResponse;
class NotaResponseDefaultTypeInternal;
extern NotaResponseDefaultTypeInternal _NotaResponse_default_instance_;
class ResponseStatus;
class ResponseStatusDefaultTypeInternal;
extern ResponseStatusDefaultTypeInternal _ResponseStatus_default_instance_;
namespace google {
namespace protobuf {
template<> ::Aluno* Arena::CreateMaybeMessage<::Aluno>(Arena*);
template<> ::AlunosRequest* Arena::CreateMaybeMessage<::AlunosRequest>(Arena*);
template<> ::AlunosResponse* Arena::CreateMaybeMessage<::AlunosResponse>(Arena*);
template<> ::Curso* Arena::CreateMaybeMessage<::Curso>(Arena*);
template<> ::Disciplina* Arena::CreateMaybeMessage<::Disciplina>(Arena*);
template<> ::DisciplinaRequest* Arena::CreateMaybeMessage<::DisciplinaRequest>(Arena*);
template<> ::DisciplinaResponse* Arena::CreateMaybeMessage<::DisciplinaResponse>(Arena*);
template<> ::Matricula* Arena::CreateMaybeMessage<::Matricula>(Arena*);
template<> ::MatriculaRequest* Arena::CreateMaybeMessage<::MatriculaRequest>(Arena*);
template<> ::MatriculaResponse* Arena::CreateMaybeMessage<::MatriculaResponse>(Arena*);
template<> ::NotaRequest* Arena::CreateMaybeMessage<::NotaRequest>(Arena*);
template<> ::NotaResponse* Arena::CreateMaybeMessage<::NotaResponse>(Arena*);
template<> ::ResponseStatus* Arena::CreateMaybeMessage<::ResponseStatus>(Arena*);
}  // namespace protobuf
}  // namespace google

enum NotaRequest_OperationType {
  NotaRequest_OperationType_CREATE = 0,
  NotaRequest_OperationType_RETRIEVE = 1,
  NotaRequest_OperationType_UPDATE = 2,
  NotaRequest_OperationType_DELETE = 3,
  NotaRequest_OperationType_NotaRequest_OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  NotaRequest_OperationType_NotaRequest_OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool NotaRequest_OperationType_IsValid(int value);
const NotaRequest_OperationType NotaRequest_OperationType_OperationType_MIN = NotaRequest_OperationType_CREATE;
const NotaRequest_OperationType NotaRequest_OperationType_OperationType_MAX = NotaRequest_OperationType_DELETE;
const int NotaRequest_OperationType_OperationType_ARRAYSIZE = NotaRequest_OperationType_OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotaRequest_OperationType_descriptor();
inline const ::std::string& NotaRequest_OperationType_Name(NotaRequest_OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotaRequest_OperationType_descriptor(), value);
}
inline bool NotaRequest_OperationType_Parse(
    const ::std::string& name, NotaRequest_OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotaRequest_OperationType>(
    NotaRequest_OperationType_descriptor(), name, value);
}
// ===================================================================

class Curso final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Curso) */ {
 public:
  Curso();
  virtual ~Curso();

  Curso(const Curso& from);

  inline Curso& operator=(const Curso& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Curso(Curso&& from) noexcept
    : Curso() {
    *this = ::std::move(from);
  }

  inline Curso& operator=(Curso&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Curso& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Curso* internal_default_instance() {
    return reinterpret_cast<const Curso*>(
               &_Curso_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Curso* other);
  friend void swap(Curso& a, Curso& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Curso* New() const final {
    return CreateMaybeMessage<Curso>(nullptr);
  }

  Curso* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Curso>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Curso& from);
  void MergeFrom(const Curso& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Curso* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nome = 2;
  void clear_nome();
  static const int kNomeFieldNumber = 2;
  const ::std::string& nome() const;
  void set_nome(const ::std::string& value);
  #if LANG_CXX11
  void set_nome(::std::string&& value);
  #endif
  void set_nome(const char* value);
  void set_nome(const char* value, size_t size);
  ::std::string* mutable_nome();
  ::std::string* release_nome();
  void set_allocated_nome(::std::string* nome);

  // int32 codigo = 1;
  void clear_codigo();
  static const int kCodigoFieldNumber = 1;
  ::google::protobuf::int32 codigo() const;
  void set_codigo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Curso)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nome_;
  ::google::protobuf::int32 codigo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class Disciplina final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Disciplina) */ {
 public:
  Disciplina();
  virtual ~Disciplina();

  Disciplina(const Disciplina& from);

  inline Disciplina& operator=(const Disciplina& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Disciplina(Disciplina&& from) noexcept
    : Disciplina() {
    *this = ::std::move(from);
  }

  inline Disciplina& operator=(Disciplina&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Disciplina& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Disciplina* internal_default_instance() {
    return reinterpret_cast<const Disciplina*>(
               &_Disciplina_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Disciplina* other);
  friend void swap(Disciplina& a, Disciplina& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Disciplina* New() const final {
    return CreateMaybeMessage<Disciplina>(nullptr);
  }

  Disciplina* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Disciplina>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Disciplina& from);
  void MergeFrom(const Disciplina& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Disciplina* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string codigo = 1;
  void clear_codigo();
  static const int kCodigoFieldNumber = 1;
  const ::std::string& codigo() const;
  void set_codigo(const ::std::string& value);
  #if LANG_CXX11
  void set_codigo(::std::string&& value);
  #endif
  void set_codigo(const char* value);
  void set_codigo(const char* value, size_t size);
  ::std::string* mutable_codigo();
  ::std::string* release_codigo();
  void set_allocated_codigo(::std::string* codigo);

  // string nome = 2;
  void clear_nome();
  static const int kNomeFieldNumber = 2;
  const ::std::string& nome() const;
  void set_nome(const ::std::string& value);
  #if LANG_CXX11
  void set_nome(::std::string&& value);
  #endif
  void set_nome(const char* value);
  void set_nome(const char* value, size_t size);
  ::std::string* mutable_nome();
  ::std::string* release_nome();
  void set_allocated_nome(::std::string* nome);

  // string professor = 3;
  void clear_professor();
  static const int kProfessorFieldNumber = 3;
  const ::std::string& professor() const;
  void set_professor(const ::std::string& value);
  #if LANG_CXX11
  void set_professor(::std::string&& value);
  #endif
  void set_professor(const char* value);
  void set_professor(const char* value, size_t size);
  ::std::string* mutable_professor();
  ::std::string* release_professor();
  void set_allocated_professor(::std::string* professor);

  // .Curso curso = 4;
  bool has_curso() const;
  void clear_curso();
  static const int kCursoFieldNumber = 4;
  const ::Curso& curso() const;
  ::Curso* release_curso();
  ::Curso* mutable_curso();
  void set_allocated_curso(::Curso* curso);

  // @@protoc_insertion_point(class_scope:Disciplina)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr codigo_;
  ::google::protobuf::internal::ArenaStringPtr nome_;
  ::google::protobuf::internal::ArenaStringPtr professor_;
  ::Curso* curso_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class Aluno final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Aluno) */ {
 public:
  Aluno();
  virtual ~Aluno();

  Aluno(const Aluno& from);

  inline Aluno& operator=(const Aluno& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Aluno(Aluno&& from) noexcept
    : Aluno() {
    *this = ::std::move(from);
  }

  inline Aluno& operator=(Aluno&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Aluno& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Aluno* internal_default_instance() {
    return reinterpret_cast<const Aluno*>(
               &_Aluno_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Aluno* other);
  friend void swap(Aluno& a, Aluno& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Aluno* New() const final {
    return CreateMaybeMessage<Aluno>(nullptr);
  }

  Aluno* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Aluno>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Aluno& from);
  void MergeFrom(const Aluno& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aluno* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nome = 2;
  void clear_nome();
  static const int kNomeFieldNumber = 2;
  const ::std::string& nome() const;
  void set_nome(const ::std::string& value);
  #if LANG_CXX11
  void set_nome(::std::string&& value);
  #endif
  void set_nome(const char* value);
  void set_nome(const char* value, size_t size);
  ::std::string* mutable_nome();
  ::std::string* release_nome();
  void set_allocated_nome(::std::string* nome);

  // .Curso curso = 4;
  bool has_curso() const;
  void clear_curso();
  static const int kCursoFieldNumber = 4;
  const ::Curso& curso() const;
  ::Curso* release_curso();
  ::Curso* mutable_curso();
  void set_allocated_curso(::Curso* curso);

  // int32 RA = 1;
  void clear_ra();
  static const int kRAFieldNumber = 1;
  ::google::protobuf::int32 ra() const;
  void set_ra(::google::protobuf::int32 value);

  // int32 periodo = 3;
  void clear_periodo();
  static const int kPeriodoFieldNumber = 3;
  ::google::protobuf::int32 periodo() const;
  void set_periodo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Aluno)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nome_;
  ::Curso* curso_;
  ::google::protobuf::int32 ra_;
  ::google::protobuf::int32 periodo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class Matricula final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Matricula) */ {
 public:
  Matricula();
  virtual ~Matricula();

  Matricula(const Matricula& from);

  inline Matricula& operator=(const Matricula& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Matricula(Matricula&& from) noexcept
    : Matricula() {
    *this = ::std::move(from);
  }

  inline Matricula& operator=(Matricula&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Matricula& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Matricula* internal_default_instance() {
    return reinterpret_cast<const Matricula*>(
               &_Matricula_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Matricula* other);
  friend void swap(Matricula& a, Matricula& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Matricula* New() const final {
    return CreateMaybeMessage<Matricula>(nullptr);
  }

  Matricula* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Matricula>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Matricula& from);
  void MergeFrom(const Matricula& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matricula* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Aluno aluno = 1;
  bool has_aluno() const;
  void clear_aluno();
  static const int kAlunoFieldNumber = 1;
  const ::Aluno& aluno() const;
  ::Aluno* release_aluno();
  ::Aluno* mutable_aluno();
  void set_allocated_aluno(::Aluno* aluno);

  // .Disciplina disciplina = 2;
  bool has_disciplina() const;
  void clear_disciplina();
  static const int kDisciplinaFieldNumber = 2;
  const ::Disciplina& disciplina() const;
  ::Disciplina* release_disciplina();
  ::Disciplina* mutable_disciplina();
  void set_allocated_disciplina(::Disciplina* disciplina);

  // int32 ano = 3;
  void clear_ano();
  static const int kAnoFieldNumber = 3;
  ::google::protobuf::int32 ano() const;
  void set_ano(::google::protobuf::int32 value);

  // int32 semestre = 4;
  void clear_semestre();
  static const int kSemestreFieldNumber = 4;
  ::google::protobuf::int32 semestre() const;
  void set_semestre(::google::protobuf::int32 value);

  // float nota = 5;
  void clear_nota();
  static const int kNotaFieldNumber = 5;
  float nota() const;
  void set_nota(float value);

  // int32 faltas = 6;
  void clear_faltas();
  static const int kFaltasFieldNumber = 6;
  ::google::protobuf::int32 faltas() const;
  void set_faltas(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Matricula)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Aluno* aluno_;
  ::Disciplina* disciplina_;
  ::google::protobuf::int32 ano_;
  ::google::protobuf::int32 semestre_;
  float nota_;
  ::google::protobuf::int32 faltas_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class ResponseStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResponseStatus) */ {
 public:
  ResponseStatus();
  virtual ~ResponseStatus();

  ResponseStatus(const ResponseStatus& from);

  inline ResponseStatus& operator=(const ResponseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseStatus(ResponseStatus&& from) noexcept
    : ResponseStatus() {
    *this = ::std::move(from);
  }

  inline ResponseStatus& operator=(ResponseStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResponseStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseStatus* internal_default_instance() {
    return reinterpret_cast<const ResponseStatus*>(
               &_ResponseStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ResponseStatus* other);
  friend void swap(ResponseStatus& a, ResponseStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseStatus* New() const final {
    return CreateMaybeMessage<ResponseStatus>(nullptr);
  }

  ResponseStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseStatus& from);
  void MergeFrom(const ResponseStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 statusCode = 1;
  void clear_statuscode();
  static const int kStatusCodeFieldNumber = 1;
  ::google::protobuf::int32 statuscode() const;
  void set_statuscode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ResponseStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 statuscode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class NotaRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NotaRequest) */ {
 public:
  NotaRequest();
  virtual ~NotaRequest();

  NotaRequest(const NotaRequest& from);

  inline NotaRequest& operator=(const NotaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotaRequest(NotaRequest&& from) noexcept
    : NotaRequest() {
    *this = ::std::move(from);
  }

  inline NotaRequest& operator=(NotaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NotaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotaRequest* internal_default_instance() {
    return reinterpret_cast<const NotaRequest*>(
               &_NotaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NotaRequest* other);
  friend void swap(NotaRequest& a, NotaRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotaRequest* New() const final {
    return CreateMaybeMessage<NotaRequest>(nullptr);
  }

  NotaRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotaRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotaRequest& from);
  void MergeFrom(const NotaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotaRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NotaRequest_OperationType OperationType;
  static const OperationType CREATE =
    NotaRequest_OperationType_CREATE;
  static const OperationType RETRIEVE =
    NotaRequest_OperationType_RETRIEVE;
  static const OperationType UPDATE =
    NotaRequest_OperationType_UPDATE;
  static const OperationType DELETE =
    NotaRequest_OperationType_DELETE;
  static inline bool OperationType_IsValid(int value) {
    return NotaRequest_OperationType_IsValid(value);
  }
  static const OperationType OperationType_MIN =
    NotaRequest_OperationType_OperationType_MIN;
  static const OperationType OperationType_MAX =
    NotaRequest_OperationType_OperationType_MAX;
  static const int OperationType_ARRAYSIZE =
    NotaRequest_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationType_descriptor() {
    return NotaRequest_OperationType_descriptor();
  }
  static inline const ::std::string& OperationType_Name(OperationType value) {
    return NotaRequest_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(const ::std::string& name,
      OperationType* value) {
    return NotaRequest_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Matricula matricula = 2;
  bool has_matricula() const;
  void clear_matricula();
  static const int kMatriculaFieldNumber = 2;
  const ::Matricula& matricula() const;
  ::Matricula* release_matricula();
  ::Matricula* mutable_matricula();
  void set_allocated_matricula(::Matricula* matricula);

  // .NotaRequest.OperationType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::NotaRequest_OperationType type() const;
  void set_type(::NotaRequest_OperationType value);

  // @@protoc_insertion_point(class_scope:NotaRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Matricula* matricula_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class NotaResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NotaResponse) */ {
 public:
  NotaResponse();
  virtual ~NotaResponse();

  NotaResponse(const NotaResponse& from);

  inline NotaResponse& operator=(const NotaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotaResponse(NotaResponse&& from) noexcept
    : NotaResponse() {
    *this = ::std::move(from);
  }

  inline NotaResponse& operator=(NotaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NotaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotaResponse* internal_default_instance() {
    return reinterpret_cast<const NotaResponse*>(
               &_NotaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NotaResponse* other);
  friend void swap(NotaResponse& a, NotaResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotaResponse* New() const final {
    return CreateMaybeMessage<NotaResponse>(nullptr);
  }

  NotaResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotaResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotaResponse& from);
  void MergeFrom(const NotaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotaResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Matricula matricula = 1;
  bool has_matricula() const;
  void clear_matricula();
  static const int kMatriculaFieldNumber = 1;
  const ::Matricula& matricula() const;
  ::Matricula* release_matricula();
  ::Matricula* mutable_matricula();
  void set_allocated_matricula(::Matricula* matricula);

  // .ResponseStatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);

  // @@protoc_insertion_point(class_scope:NotaResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Matricula* matricula_;
  ::ResponseStatus* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class MatriculaRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatriculaRequest) */ {
 public:
  MatriculaRequest();
  virtual ~MatriculaRequest();

  MatriculaRequest(const MatriculaRequest& from);

  inline MatriculaRequest& operator=(const MatriculaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatriculaRequest(MatriculaRequest&& from) noexcept
    : MatriculaRequest() {
    *this = ::std::move(from);
  }

  inline MatriculaRequest& operator=(MatriculaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MatriculaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatriculaRequest* internal_default_instance() {
    return reinterpret_cast<const MatriculaRequest*>(
               &_MatriculaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MatriculaRequest* other);
  friend void swap(MatriculaRequest& a, MatriculaRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatriculaRequest* New() const final {
    return CreateMaybeMessage<MatriculaRequest>(nullptr);
  }

  MatriculaRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatriculaRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatriculaRequest& from);
  void MergeFrom(const MatriculaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatriculaRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Disciplina disciplina = 1;
  bool has_disciplina() const;
  void clear_disciplina();
  static const int kDisciplinaFieldNumber = 1;
  const ::Disciplina& disciplina() const;
  ::Disciplina* release_disciplina();
  ::Disciplina* mutable_disciplina();
  void set_allocated_disciplina(::Disciplina* disciplina);

  // int32 ano = 2;
  void clear_ano();
  static const int kAnoFieldNumber = 2;
  ::google::protobuf::int32 ano() const;
  void set_ano(::google::protobuf::int32 value);

  // int32 semestre = 3;
  void clear_semestre();
  static const int kSemestreFieldNumber = 3;
  ::google::protobuf::int32 semestre() const;
  void set_semestre(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatriculaRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Disciplina* disciplina_;
  ::google::protobuf::int32 ano_;
  ::google::protobuf::int32 semestre_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class MatriculaResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatriculaResponse) */ {
 public:
  MatriculaResponse();
  virtual ~MatriculaResponse();

  MatriculaResponse(const MatriculaResponse& from);

  inline MatriculaResponse& operator=(const MatriculaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatriculaResponse(MatriculaResponse&& from) noexcept
    : MatriculaResponse() {
    *this = ::std::move(from);
  }

  inline MatriculaResponse& operator=(MatriculaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MatriculaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatriculaResponse* internal_default_instance() {
    return reinterpret_cast<const MatriculaResponse*>(
               &_MatriculaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MatriculaResponse* other);
  friend void swap(MatriculaResponse& a, MatriculaResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatriculaResponse* New() const final {
    return CreateMaybeMessage<MatriculaResponse>(nullptr);
  }

  MatriculaResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatriculaResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatriculaResponse& from);
  void MergeFrom(const MatriculaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatriculaResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Matricula matriculas = 2;
  int matriculas_size() const;
  void clear_matriculas();
  static const int kMatriculasFieldNumber = 2;
  ::Matricula* mutable_matriculas(int index);
  ::google::protobuf::RepeatedPtrField< ::Matricula >*
      mutable_matriculas();
  const ::Matricula& matriculas(int index) const;
  ::Matricula* add_matriculas();
  const ::google::protobuf::RepeatedPtrField< ::Matricula >&
      matriculas() const;

  // .Disciplina disciplina = 1;
  bool has_disciplina() const;
  void clear_disciplina();
  static const int kDisciplinaFieldNumber = 1;
  const ::Disciplina& disciplina() const;
  ::Disciplina* release_disciplina();
  ::Disciplina* mutable_disciplina();
  void set_allocated_disciplina(::Disciplina* disciplina);

  // .ResponseStatus status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);

  // @@protoc_insertion_point(class_scope:MatriculaResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Matricula > matriculas_;
  ::Disciplina* disciplina_;
  ::ResponseStatus* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class AlunosRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AlunosRequest) */ {
 public:
  AlunosRequest();
  virtual ~AlunosRequest();

  AlunosRequest(const AlunosRequest& from);

  inline AlunosRequest& operator=(const AlunosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlunosRequest(AlunosRequest&& from) noexcept
    : AlunosRequest() {
    *this = ::std::move(from);
  }

  inline AlunosRequest& operator=(AlunosRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlunosRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlunosRequest* internal_default_instance() {
    return reinterpret_cast<const AlunosRequest*>(
               &_AlunosRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AlunosRequest* other);
  friend void swap(AlunosRequest& a, AlunosRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlunosRequest* New() const final {
    return CreateMaybeMessage<AlunosRequest>(nullptr);
  }

  AlunosRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlunosRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlunosRequest& from);
  void MergeFrom(const AlunosRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlunosRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Disciplina disciplina = 1;
  bool has_disciplina() const;
  void clear_disciplina();
  static const int kDisciplinaFieldNumber = 1;
  const ::Disciplina& disciplina() const;
  ::Disciplina* release_disciplina();
  ::Disciplina* mutable_disciplina();
  void set_allocated_disciplina(::Disciplina* disciplina);

  // int32 ano = 2;
  void clear_ano();
  static const int kAnoFieldNumber = 2;
  ::google::protobuf::int32 ano() const;
  void set_ano(::google::protobuf::int32 value);

  // int32 semestre = 3;
  void clear_semestre();
  static const int kSemestreFieldNumber = 3;
  ::google::protobuf::int32 semestre() const;
  void set_semestre(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AlunosRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Disciplina* disciplina_;
  ::google::protobuf::int32 ano_;
  ::google::protobuf::int32 semestre_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class AlunosResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AlunosResponse) */ {
 public:
  AlunosResponse();
  virtual ~AlunosResponse();

  AlunosResponse(const AlunosResponse& from);

  inline AlunosResponse& operator=(const AlunosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlunosResponse(AlunosResponse&& from) noexcept
    : AlunosResponse() {
    *this = ::std::move(from);
  }

  inline AlunosResponse& operator=(AlunosResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AlunosResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlunosResponse* internal_default_instance() {
    return reinterpret_cast<const AlunosResponse*>(
               &_AlunosResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(AlunosResponse* other);
  friend void swap(AlunosResponse& a, AlunosResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlunosResponse* New() const final {
    return CreateMaybeMessage<AlunosResponse>(nullptr);
  }

  AlunosResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlunosResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AlunosResponse& from);
  void MergeFrom(const AlunosResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlunosResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Aluno alunos = 2;
  int alunos_size() const;
  void clear_alunos();
  static const int kAlunosFieldNumber = 2;
  ::Aluno* mutable_alunos(int index);
  ::google::protobuf::RepeatedPtrField< ::Aluno >*
      mutable_alunos();
  const ::Aluno& alunos(int index) const;
  ::Aluno* add_alunos();
  const ::google::protobuf::RepeatedPtrField< ::Aluno >&
      alunos() const;

  // .ResponseStatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);

  // @@protoc_insertion_point(class_scope:AlunosResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Aluno > alunos_;
  ::ResponseStatus* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class DisciplinaRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DisciplinaRequest) */ {
 public:
  DisciplinaRequest();
  virtual ~DisciplinaRequest();

  DisciplinaRequest(const DisciplinaRequest& from);

  inline DisciplinaRequest& operator=(const DisciplinaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisciplinaRequest(DisciplinaRequest&& from) noexcept
    : DisciplinaRequest() {
    *this = ::std::move(from);
  }

  inline DisciplinaRequest& operator=(DisciplinaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DisciplinaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisciplinaRequest* internal_default_instance() {
    return reinterpret_cast<const DisciplinaRequest*>(
               &_DisciplinaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DisciplinaRequest* other);
  friend void swap(DisciplinaRequest& a, DisciplinaRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisciplinaRequest* New() const final {
    return CreateMaybeMessage<DisciplinaRequest>(nullptr);
  }

  DisciplinaRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DisciplinaRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DisciplinaRequest& from);
  void MergeFrom(const DisciplinaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisciplinaRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Curso curso = 1;
  bool has_curso() const;
  void clear_curso();
  static const int kCursoFieldNumber = 1;
  const ::Curso& curso() const;
  ::Curso* release_curso();
  ::Curso* mutable_curso();
  void set_allocated_curso(::Curso* curso);

  // @@protoc_insertion_point(class_scope:DisciplinaRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Curso* curso_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// -------------------------------------------------------------------

class DisciplinaResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DisciplinaResponse) */ {
 public:
  DisciplinaResponse();
  virtual ~DisciplinaResponse();

  DisciplinaResponse(const DisciplinaResponse& from);

  inline DisciplinaResponse& operator=(const DisciplinaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisciplinaResponse(DisciplinaResponse&& from) noexcept
    : DisciplinaResponse() {
    *this = ::std::move(from);
  }

  inline DisciplinaResponse& operator=(DisciplinaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DisciplinaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisciplinaResponse* internal_default_instance() {
    return reinterpret_cast<const DisciplinaResponse*>(
               &_DisciplinaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(DisciplinaResponse* other);
  friend void swap(DisciplinaResponse& a, DisciplinaResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisciplinaResponse* New() const final {
    return CreateMaybeMessage<DisciplinaResponse>(nullptr);
  }

  DisciplinaResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DisciplinaResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DisciplinaResponse& from);
  void MergeFrom(const DisciplinaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisciplinaResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Disciplina disciplinas = 2;
  int disciplinas_size() const;
  void clear_disciplinas();
  static const int kDisciplinasFieldNumber = 2;
  ::Disciplina* mutable_disciplinas(int index);
  ::google::protobuf::RepeatedPtrField< ::Disciplina >*
      mutable_disciplinas();
  const ::Disciplina& disciplinas(int index) const;
  ::Disciplina* add_disciplinas();
  const ::google::protobuf::RepeatedPtrField< ::Disciplina >&
      disciplinas() const;

  // .Curso curso = 1;
  bool has_curso() const;
  void clear_curso();
  static const int kCursoFieldNumber = 1;
  const ::Curso& curso() const;
  ::Curso* release_curso();
  ::Curso* mutable_curso();
  void set_allocated_curso(::Curso* curso);

  // .ResponseStatus status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::ResponseStatus& status() const;
  ::ResponseStatus* release_status();
  ::ResponseStatus* mutable_status();
  void set_allocated_status(::ResponseStatus* status);

  // @@protoc_insertion_point(class_scope:DisciplinaResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Disciplina > disciplinas_;
  ::Curso* curso_;
  ::ResponseStatus* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_red_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Curso

// int32 codigo = 1;
inline void Curso::clear_codigo() {
  codigo_ = 0;
}
inline ::google::protobuf::int32 Curso::codigo() const {
  // @@protoc_insertion_point(field_get:Curso.codigo)
  return codigo_;
}
inline void Curso::set_codigo(::google::protobuf::int32 value) {
  
  codigo_ = value;
  // @@protoc_insertion_point(field_set:Curso.codigo)
}

// string nome = 2;
inline void Curso::clear_nome() {
  nome_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Curso::nome() const {
  // @@protoc_insertion_point(field_get:Curso.nome)
  return nome_.GetNoArena();
}
inline void Curso::set_nome(const ::std::string& value) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Curso.nome)
}
#if LANG_CXX11
inline void Curso::set_nome(::std::string&& value) {
  
  nome_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Curso.nome)
}
#endif
inline void Curso::set_nome(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Curso.nome)
}
inline void Curso::set_nome(const char* value, size_t size) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Curso.nome)
}
inline ::std::string* Curso::mutable_nome() {
  
  // @@protoc_insertion_point(field_mutable:Curso.nome)
  return nome_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Curso::release_nome() {
  // @@protoc_insertion_point(field_release:Curso.nome)
  
  return nome_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Curso::set_allocated_nome(::std::string* nome) {
  if (nome != nullptr) {
    
  } else {
    
  }
  nome_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nome);
  // @@protoc_insertion_point(field_set_allocated:Curso.nome)
}

// -------------------------------------------------------------------

// Disciplina

// string codigo = 1;
inline void Disciplina::clear_codigo() {
  codigo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Disciplina::codigo() const {
  // @@protoc_insertion_point(field_get:Disciplina.codigo)
  return codigo_.GetNoArena();
}
inline void Disciplina::set_codigo(const ::std::string& value) {
  
  codigo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Disciplina.codigo)
}
#if LANG_CXX11
inline void Disciplina::set_codigo(::std::string&& value) {
  
  codigo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Disciplina.codigo)
}
#endif
inline void Disciplina::set_codigo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  codigo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Disciplina.codigo)
}
inline void Disciplina::set_codigo(const char* value, size_t size) {
  
  codigo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Disciplina.codigo)
}
inline ::std::string* Disciplina::mutable_codigo() {
  
  // @@protoc_insertion_point(field_mutable:Disciplina.codigo)
  return codigo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Disciplina::release_codigo() {
  // @@protoc_insertion_point(field_release:Disciplina.codigo)
  
  return codigo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Disciplina::set_allocated_codigo(::std::string* codigo) {
  if (codigo != nullptr) {
    
  } else {
    
  }
  codigo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codigo);
  // @@protoc_insertion_point(field_set_allocated:Disciplina.codigo)
}

// string nome = 2;
inline void Disciplina::clear_nome() {
  nome_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Disciplina::nome() const {
  // @@protoc_insertion_point(field_get:Disciplina.nome)
  return nome_.GetNoArena();
}
inline void Disciplina::set_nome(const ::std::string& value) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Disciplina.nome)
}
#if LANG_CXX11
inline void Disciplina::set_nome(::std::string&& value) {
  
  nome_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Disciplina.nome)
}
#endif
inline void Disciplina::set_nome(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Disciplina.nome)
}
inline void Disciplina::set_nome(const char* value, size_t size) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Disciplina.nome)
}
inline ::std::string* Disciplina::mutable_nome() {
  
  // @@protoc_insertion_point(field_mutable:Disciplina.nome)
  return nome_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Disciplina::release_nome() {
  // @@protoc_insertion_point(field_release:Disciplina.nome)
  
  return nome_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Disciplina::set_allocated_nome(::std::string* nome) {
  if (nome != nullptr) {
    
  } else {
    
  }
  nome_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nome);
  // @@protoc_insertion_point(field_set_allocated:Disciplina.nome)
}

// string professor = 3;
inline void Disciplina::clear_professor() {
  professor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Disciplina::professor() const {
  // @@protoc_insertion_point(field_get:Disciplina.professor)
  return professor_.GetNoArena();
}
inline void Disciplina::set_professor(const ::std::string& value) {
  
  professor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Disciplina.professor)
}
#if LANG_CXX11
inline void Disciplina::set_professor(::std::string&& value) {
  
  professor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Disciplina.professor)
}
#endif
inline void Disciplina::set_professor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  professor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Disciplina.professor)
}
inline void Disciplina::set_professor(const char* value, size_t size) {
  
  professor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Disciplina.professor)
}
inline ::std::string* Disciplina::mutable_professor() {
  
  // @@protoc_insertion_point(field_mutable:Disciplina.professor)
  return professor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Disciplina::release_professor() {
  // @@protoc_insertion_point(field_release:Disciplina.professor)
  
  return professor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Disciplina::set_allocated_professor(::std::string* professor) {
  if (professor != nullptr) {
    
  } else {
    
  }
  professor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), professor);
  // @@protoc_insertion_point(field_set_allocated:Disciplina.professor)
}

// .Curso curso = 4;
inline bool Disciplina::has_curso() const {
  return this != internal_default_instance() && curso_ != nullptr;
}
inline void Disciplina::clear_curso() {
  if (GetArenaNoVirtual() == nullptr && curso_ != nullptr) {
    delete curso_;
  }
  curso_ = nullptr;
}
inline const ::Curso& Disciplina::curso() const {
  const ::Curso* p = curso_;
  // @@protoc_insertion_point(field_get:Disciplina.curso)
  return p != nullptr ? *p : *reinterpret_cast<const ::Curso*>(
      &::_Curso_default_instance_);
}
inline ::Curso* Disciplina::release_curso() {
  // @@protoc_insertion_point(field_release:Disciplina.curso)
  
  ::Curso* temp = curso_;
  curso_ = nullptr;
  return temp;
}
inline ::Curso* Disciplina::mutable_curso() {
  
  if (curso_ == nullptr) {
    auto* p = CreateMaybeMessage<::Curso>(GetArenaNoVirtual());
    curso_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Disciplina.curso)
  return curso_;
}
inline void Disciplina::set_allocated_curso(::Curso* curso) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete curso_;
  }
  if (curso) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      curso = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, curso, submessage_arena);
    }
    
  } else {
    
  }
  curso_ = curso;
  // @@protoc_insertion_point(field_set_allocated:Disciplina.curso)
}

// -------------------------------------------------------------------

// Aluno

// int32 RA = 1;
inline void Aluno::clear_ra() {
  ra_ = 0;
}
inline ::google::protobuf::int32 Aluno::ra() const {
  // @@protoc_insertion_point(field_get:Aluno.RA)
  return ra_;
}
inline void Aluno::set_ra(::google::protobuf::int32 value) {
  
  ra_ = value;
  // @@protoc_insertion_point(field_set:Aluno.RA)
}

// string nome = 2;
inline void Aluno::clear_nome() {
  nome_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Aluno::nome() const {
  // @@protoc_insertion_point(field_get:Aluno.nome)
  return nome_.GetNoArena();
}
inline void Aluno::set_nome(const ::std::string& value) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Aluno.nome)
}
#if LANG_CXX11
inline void Aluno::set_nome(::std::string&& value) {
  
  nome_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Aluno.nome)
}
#endif
inline void Aluno::set_nome(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Aluno.nome)
}
inline void Aluno::set_nome(const char* value, size_t size) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Aluno.nome)
}
inline ::std::string* Aluno::mutable_nome() {
  
  // @@protoc_insertion_point(field_mutable:Aluno.nome)
  return nome_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Aluno::release_nome() {
  // @@protoc_insertion_point(field_release:Aluno.nome)
  
  return nome_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Aluno::set_allocated_nome(::std::string* nome) {
  if (nome != nullptr) {
    
  } else {
    
  }
  nome_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nome);
  // @@protoc_insertion_point(field_set_allocated:Aluno.nome)
}

// int32 periodo = 3;
inline void Aluno::clear_periodo() {
  periodo_ = 0;
}
inline ::google::protobuf::int32 Aluno::periodo() const {
  // @@protoc_insertion_point(field_get:Aluno.periodo)
  return periodo_;
}
inline void Aluno::set_periodo(::google::protobuf::int32 value) {
  
  periodo_ = value;
  // @@protoc_insertion_point(field_set:Aluno.periodo)
}

// .Curso curso = 4;
inline bool Aluno::has_curso() const {
  return this != internal_default_instance() && curso_ != nullptr;
}
inline void Aluno::clear_curso() {
  if (GetArenaNoVirtual() == nullptr && curso_ != nullptr) {
    delete curso_;
  }
  curso_ = nullptr;
}
inline const ::Curso& Aluno::curso() const {
  const ::Curso* p = curso_;
  // @@protoc_insertion_point(field_get:Aluno.curso)
  return p != nullptr ? *p : *reinterpret_cast<const ::Curso*>(
      &::_Curso_default_instance_);
}
inline ::Curso* Aluno::release_curso() {
  // @@protoc_insertion_point(field_release:Aluno.curso)
  
  ::Curso* temp = curso_;
  curso_ = nullptr;
  return temp;
}
inline ::Curso* Aluno::mutable_curso() {
  
  if (curso_ == nullptr) {
    auto* p = CreateMaybeMessage<::Curso>(GetArenaNoVirtual());
    curso_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Aluno.curso)
  return curso_;
}
inline void Aluno::set_allocated_curso(::Curso* curso) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete curso_;
  }
  if (curso) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      curso = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, curso, submessage_arena);
    }
    
  } else {
    
  }
  curso_ = curso;
  // @@protoc_insertion_point(field_set_allocated:Aluno.curso)
}

// -------------------------------------------------------------------

// Matricula

// .Aluno aluno = 1;
inline bool Matricula::has_aluno() const {
  return this != internal_default_instance() && aluno_ != nullptr;
}
inline void Matricula::clear_aluno() {
  if (GetArenaNoVirtual() == nullptr && aluno_ != nullptr) {
    delete aluno_;
  }
  aluno_ = nullptr;
}
inline const ::Aluno& Matricula::aluno() const {
  const ::Aluno* p = aluno_;
  // @@protoc_insertion_point(field_get:Matricula.aluno)
  return p != nullptr ? *p : *reinterpret_cast<const ::Aluno*>(
      &::_Aluno_default_instance_);
}
inline ::Aluno* Matricula::release_aluno() {
  // @@protoc_insertion_point(field_release:Matricula.aluno)
  
  ::Aluno* temp = aluno_;
  aluno_ = nullptr;
  return temp;
}
inline ::Aluno* Matricula::mutable_aluno() {
  
  if (aluno_ == nullptr) {
    auto* p = CreateMaybeMessage<::Aluno>(GetArenaNoVirtual());
    aluno_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Matricula.aluno)
  return aluno_;
}
inline void Matricula::set_allocated_aluno(::Aluno* aluno) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete aluno_;
  }
  if (aluno) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aluno = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, aluno, submessage_arena);
    }
    
  } else {
    
  }
  aluno_ = aluno;
  // @@protoc_insertion_point(field_set_allocated:Matricula.aluno)
}

// .Disciplina disciplina = 2;
inline bool Matricula::has_disciplina() const {
  return this != internal_default_instance() && disciplina_ != nullptr;
}
inline void Matricula::clear_disciplina() {
  if (GetArenaNoVirtual() == nullptr && disciplina_ != nullptr) {
    delete disciplina_;
  }
  disciplina_ = nullptr;
}
inline const ::Disciplina& Matricula::disciplina() const {
  const ::Disciplina* p = disciplina_;
  // @@protoc_insertion_point(field_get:Matricula.disciplina)
  return p != nullptr ? *p : *reinterpret_cast<const ::Disciplina*>(
      &::_Disciplina_default_instance_);
}
inline ::Disciplina* Matricula::release_disciplina() {
  // @@protoc_insertion_point(field_release:Matricula.disciplina)
  
  ::Disciplina* temp = disciplina_;
  disciplina_ = nullptr;
  return temp;
}
inline ::Disciplina* Matricula::mutable_disciplina() {
  
  if (disciplina_ == nullptr) {
    auto* p = CreateMaybeMessage<::Disciplina>(GetArenaNoVirtual());
    disciplina_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Matricula.disciplina)
  return disciplina_;
}
inline void Matricula::set_allocated_disciplina(::Disciplina* disciplina) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete disciplina_;
  }
  if (disciplina) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disciplina = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, disciplina, submessage_arena);
    }
    
  } else {
    
  }
  disciplina_ = disciplina;
  // @@protoc_insertion_point(field_set_allocated:Matricula.disciplina)
}

// int32 ano = 3;
inline void Matricula::clear_ano() {
  ano_ = 0;
}
inline ::google::protobuf::int32 Matricula::ano() const {
  // @@protoc_insertion_point(field_get:Matricula.ano)
  return ano_;
}
inline void Matricula::set_ano(::google::protobuf::int32 value) {
  
  ano_ = value;
  // @@protoc_insertion_point(field_set:Matricula.ano)
}

// int32 semestre = 4;
inline void Matricula::clear_semestre() {
  semestre_ = 0;
}
inline ::google::protobuf::int32 Matricula::semestre() const {
  // @@protoc_insertion_point(field_get:Matricula.semestre)
  return semestre_;
}
inline void Matricula::set_semestre(::google::protobuf::int32 value) {
  
  semestre_ = value;
  // @@protoc_insertion_point(field_set:Matricula.semestre)
}

// float nota = 5;
inline void Matricula::clear_nota() {
  nota_ = 0;
}
inline float Matricula::nota() const {
  // @@protoc_insertion_point(field_get:Matricula.nota)
  return nota_;
}
inline void Matricula::set_nota(float value) {
  
  nota_ = value;
  // @@protoc_insertion_point(field_set:Matricula.nota)
}

// int32 faltas = 6;
inline void Matricula::clear_faltas() {
  faltas_ = 0;
}
inline ::google::protobuf::int32 Matricula::faltas() const {
  // @@protoc_insertion_point(field_get:Matricula.faltas)
  return faltas_;
}
inline void Matricula::set_faltas(::google::protobuf::int32 value) {
  
  faltas_ = value;
  // @@protoc_insertion_point(field_set:Matricula.faltas)
}

// -------------------------------------------------------------------

// ResponseStatus

// int32 statusCode = 1;
inline void ResponseStatus::clear_statuscode() {
  statuscode_ = 0;
}
inline ::google::protobuf::int32 ResponseStatus::statuscode() const {
  // @@protoc_insertion_point(field_get:ResponseStatus.statusCode)
  return statuscode_;
}
inline void ResponseStatus::set_statuscode(::google::protobuf::int32 value) {
  
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:ResponseStatus.statusCode)
}

// string message = 2;
inline void ResponseStatus::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseStatus::message() const {
  // @@protoc_insertion_point(field_get:ResponseStatus.message)
  return message_.GetNoArena();
}
inline void ResponseStatus::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseStatus.message)
}
#if LANG_CXX11
inline void ResponseStatus::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseStatus.message)
}
#endif
inline void ResponseStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseStatus.message)
}
inline void ResponseStatus::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseStatus.message)
}
inline ::std::string* ResponseStatus::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ResponseStatus.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseStatus::release_message() {
  // @@protoc_insertion_point(field_release:ResponseStatus.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseStatus::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ResponseStatus.message)
}

// -------------------------------------------------------------------

// NotaRequest

// .NotaRequest.OperationType type = 1;
inline void NotaRequest::clear_type() {
  type_ = 0;
}
inline ::NotaRequest_OperationType NotaRequest::type() const {
  // @@protoc_insertion_point(field_get:NotaRequest.type)
  return static_cast< ::NotaRequest_OperationType >(type_);
}
inline void NotaRequest::set_type(::NotaRequest_OperationType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NotaRequest.type)
}

// .Matricula matricula = 2;
inline bool NotaRequest::has_matricula() const {
  return this != internal_default_instance() && matricula_ != nullptr;
}
inline void NotaRequest::clear_matricula() {
  if (GetArenaNoVirtual() == nullptr && matricula_ != nullptr) {
    delete matricula_;
  }
  matricula_ = nullptr;
}
inline const ::Matricula& NotaRequest::matricula() const {
  const ::Matricula* p = matricula_;
  // @@protoc_insertion_point(field_get:NotaRequest.matricula)
  return p != nullptr ? *p : *reinterpret_cast<const ::Matricula*>(
      &::_Matricula_default_instance_);
}
inline ::Matricula* NotaRequest::release_matricula() {
  // @@protoc_insertion_point(field_release:NotaRequest.matricula)
  
  ::Matricula* temp = matricula_;
  matricula_ = nullptr;
  return temp;
}
inline ::Matricula* NotaRequest::mutable_matricula() {
  
  if (matricula_ == nullptr) {
    auto* p = CreateMaybeMessage<::Matricula>(GetArenaNoVirtual());
    matricula_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NotaRequest.matricula)
  return matricula_;
}
inline void NotaRequest::set_allocated_matricula(::Matricula* matricula) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete matricula_;
  }
  if (matricula) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      matricula = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, matricula, submessage_arena);
    }
    
  } else {
    
  }
  matricula_ = matricula;
  // @@protoc_insertion_point(field_set_allocated:NotaRequest.matricula)
}

// -------------------------------------------------------------------

// NotaResponse

// .Matricula matricula = 1;
inline bool NotaResponse::has_matricula() const {
  return this != internal_default_instance() && matricula_ != nullptr;
}
inline void NotaResponse::clear_matricula() {
  if (GetArenaNoVirtual() == nullptr && matricula_ != nullptr) {
    delete matricula_;
  }
  matricula_ = nullptr;
}
inline const ::Matricula& NotaResponse::matricula() const {
  const ::Matricula* p = matricula_;
  // @@protoc_insertion_point(field_get:NotaResponse.matricula)
  return p != nullptr ? *p : *reinterpret_cast<const ::Matricula*>(
      &::_Matricula_default_instance_);
}
inline ::Matricula* NotaResponse::release_matricula() {
  // @@protoc_insertion_point(field_release:NotaResponse.matricula)
  
  ::Matricula* temp = matricula_;
  matricula_ = nullptr;
  return temp;
}
inline ::Matricula* NotaResponse::mutable_matricula() {
  
  if (matricula_ == nullptr) {
    auto* p = CreateMaybeMessage<::Matricula>(GetArenaNoVirtual());
    matricula_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NotaResponse.matricula)
  return matricula_;
}
inline void NotaResponse::set_allocated_matricula(::Matricula* matricula) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete matricula_;
  }
  if (matricula) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      matricula = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, matricula, submessage_arena);
    }
    
  } else {
    
  }
  matricula_ = matricula;
  // @@protoc_insertion_point(field_set_allocated:NotaResponse.matricula)
}

// .ResponseStatus status = 2;
inline bool NotaResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline void NotaResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::ResponseStatus& NotaResponse::status() const {
  const ::ResponseStatus* p = status_;
  // @@protoc_insertion_point(field_get:NotaResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* NotaResponse::release_status() {
  // @@protoc_insertion_point(field_release:NotaResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* NotaResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NotaResponse.status)
  return status_;
}
inline void NotaResponse::set_allocated_status(::ResponseStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:NotaResponse.status)
}

// -------------------------------------------------------------------

// MatriculaRequest

// .Disciplina disciplina = 1;
inline bool MatriculaRequest::has_disciplina() const {
  return this != internal_default_instance() && disciplina_ != nullptr;
}
inline void MatriculaRequest::clear_disciplina() {
  if (GetArenaNoVirtual() == nullptr && disciplina_ != nullptr) {
    delete disciplina_;
  }
  disciplina_ = nullptr;
}
inline const ::Disciplina& MatriculaRequest::disciplina() const {
  const ::Disciplina* p = disciplina_;
  // @@protoc_insertion_point(field_get:MatriculaRequest.disciplina)
  return p != nullptr ? *p : *reinterpret_cast<const ::Disciplina*>(
      &::_Disciplina_default_instance_);
}
inline ::Disciplina* MatriculaRequest::release_disciplina() {
  // @@protoc_insertion_point(field_release:MatriculaRequest.disciplina)
  
  ::Disciplina* temp = disciplina_;
  disciplina_ = nullptr;
  return temp;
}
inline ::Disciplina* MatriculaRequest::mutable_disciplina() {
  
  if (disciplina_ == nullptr) {
    auto* p = CreateMaybeMessage<::Disciplina>(GetArenaNoVirtual());
    disciplina_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MatriculaRequest.disciplina)
  return disciplina_;
}
inline void MatriculaRequest::set_allocated_disciplina(::Disciplina* disciplina) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete disciplina_;
  }
  if (disciplina) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disciplina = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, disciplina, submessage_arena);
    }
    
  } else {
    
  }
  disciplina_ = disciplina;
  // @@protoc_insertion_point(field_set_allocated:MatriculaRequest.disciplina)
}

// int32 ano = 2;
inline void MatriculaRequest::clear_ano() {
  ano_ = 0;
}
inline ::google::protobuf::int32 MatriculaRequest::ano() const {
  // @@protoc_insertion_point(field_get:MatriculaRequest.ano)
  return ano_;
}
inline void MatriculaRequest::set_ano(::google::protobuf::int32 value) {
  
  ano_ = value;
  // @@protoc_insertion_point(field_set:MatriculaRequest.ano)
}

// int32 semestre = 3;
inline void MatriculaRequest::clear_semestre() {
  semestre_ = 0;
}
inline ::google::protobuf::int32 MatriculaRequest::semestre() const {
  // @@protoc_insertion_point(field_get:MatriculaRequest.semestre)
  return semestre_;
}
inline void MatriculaRequest::set_semestre(::google::protobuf::int32 value) {
  
  semestre_ = value;
  // @@protoc_insertion_point(field_set:MatriculaRequest.semestre)
}

// -------------------------------------------------------------------

// MatriculaResponse

// .Disciplina disciplina = 1;
inline bool MatriculaResponse::has_disciplina() const {
  return this != internal_default_instance() && disciplina_ != nullptr;
}
inline void MatriculaResponse::clear_disciplina() {
  if (GetArenaNoVirtual() == nullptr && disciplina_ != nullptr) {
    delete disciplina_;
  }
  disciplina_ = nullptr;
}
inline const ::Disciplina& MatriculaResponse::disciplina() const {
  const ::Disciplina* p = disciplina_;
  // @@protoc_insertion_point(field_get:MatriculaResponse.disciplina)
  return p != nullptr ? *p : *reinterpret_cast<const ::Disciplina*>(
      &::_Disciplina_default_instance_);
}
inline ::Disciplina* MatriculaResponse::release_disciplina() {
  // @@protoc_insertion_point(field_release:MatriculaResponse.disciplina)
  
  ::Disciplina* temp = disciplina_;
  disciplina_ = nullptr;
  return temp;
}
inline ::Disciplina* MatriculaResponse::mutable_disciplina() {
  
  if (disciplina_ == nullptr) {
    auto* p = CreateMaybeMessage<::Disciplina>(GetArenaNoVirtual());
    disciplina_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MatriculaResponse.disciplina)
  return disciplina_;
}
inline void MatriculaResponse::set_allocated_disciplina(::Disciplina* disciplina) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete disciplina_;
  }
  if (disciplina) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disciplina = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, disciplina, submessage_arena);
    }
    
  } else {
    
  }
  disciplina_ = disciplina;
  // @@protoc_insertion_point(field_set_allocated:MatriculaResponse.disciplina)
}

// repeated .Matricula matriculas = 2;
inline int MatriculaResponse::matriculas_size() const {
  return matriculas_.size();
}
inline void MatriculaResponse::clear_matriculas() {
  matriculas_.Clear();
}
inline ::Matricula* MatriculaResponse::mutable_matriculas(int index) {
  // @@protoc_insertion_point(field_mutable:MatriculaResponse.matriculas)
  return matriculas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Matricula >*
MatriculaResponse::mutable_matriculas() {
  // @@protoc_insertion_point(field_mutable_list:MatriculaResponse.matriculas)
  return &matriculas_;
}
inline const ::Matricula& MatriculaResponse::matriculas(int index) const {
  // @@protoc_insertion_point(field_get:MatriculaResponse.matriculas)
  return matriculas_.Get(index);
}
inline ::Matricula* MatriculaResponse::add_matriculas() {
  // @@protoc_insertion_point(field_add:MatriculaResponse.matriculas)
  return matriculas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Matricula >&
MatriculaResponse::matriculas() const {
  // @@protoc_insertion_point(field_list:MatriculaResponse.matriculas)
  return matriculas_;
}

// .ResponseStatus status = 3;
inline bool MatriculaResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline void MatriculaResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::ResponseStatus& MatriculaResponse::status() const {
  const ::ResponseStatus* p = status_;
  // @@protoc_insertion_point(field_get:MatriculaResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* MatriculaResponse::release_status() {
  // @@protoc_insertion_point(field_release:MatriculaResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* MatriculaResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MatriculaResponse.status)
  return status_;
}
inline void MatriculaResponse::set_allocated_status(::ResponseStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:MatriculaResponse.status)
}

// -------------------------------------------------------------------

// AlunosRequest

// .Disciplina disciplina = 1;
inline bool AlunosRequest::has_disciplina() const {
  return this != internal_default_instance() && disciplina_ != nullptr;
}
inline void AlunosRequest::clear_disciplina() {
  if (GetArenaNoVirtual() == nullptr && disciplina_ != nullptr) {
    delete disciplina_;
  }
  disciplina_ = nullptr;
}
inline const ::Disciplina& AlunosRequest::disciplina() const {
  const ::Disciplina* p = disciplina_;
  // @@protoc_insertion_point(field_get:AlunosRequest.disciplina)
  return p != nullptr ? *p : *reinterpret_cast<const ::Disciplina*>(
      &::_Disciplina_default_instance_);
}
inline ::Disciplina* AlunosRequest::release_disciplina() {
  // @@protoc_insertion_point(field_release:AlunosRequest.disciplina)
  
  ::Disciplina* temp = disciplina_;
  disciplina_ = nullptr;
  return temp;
}
inline ::Disciplina* AlunosRequest::mutable_disciplina() {
  
  if (disciplina_ == nullptr) {
    auto* p = CreateMaybeMessage<::Disciplina>(GetArenaNoVirtual());
    disciplina_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AlunosRequest.disciplina)
  return disciplina_;
}
inline void AlunosRequest::set_allocated_disciplina(::Disciplina* disciplina) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete disciplina_;
  }
  if (disciplina) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disciplina = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, disciplina, submessage_arena);
    }
    
  } else {
    
  }
  disciplina_ = disciplina;
  // @@protoc_insertion_point(field_set_allocated:AlunosRequest.disciplina)
}

// int32 ano = 2;
inline void AlunosRequest::clear_ano() {
  ano_ = 0;
}
inline ::google::protobuf::int32 AlunosRequest::ano() const {
  // @@protoc_insertion_point(field_get:AlunosRequest.ano)
  return ano_;
}
inline void AlunosRequest::set_ano(::google::protobuf::int32 value) {
  
  ano_ = value;
  // @@protoc_insertion_point(field_set:AlunosRequest.ano)
}

// int32 semestre = 3;
inline void AlunosRequest::clear_semestre() {
  semestre_ = 0;
}
inline ::google::protobuf::int32 AlunosRequest::semestre() const {
  // @@protoc_insertion_point(field_get:AlunosRequest.semestre)
  return semestre_;
}
inline void AlunosRequest::set_semestre(::google::protobuf::int32 value) {
  
  semestre_ = value;
  // @@protoc_insertion_point(field_set:AlunosRequest.semestre)
}

// -------------------------------------------------------------------

// AlunosResponse

// .ResponseStatus status = 1;
inline bool AlunosResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline void AlunosResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::ResponseStatus& AlunosResponse::status() const {
  const ::ResponseStatus* p = status_;
  // @@protoc_insertion_point(field_get:AlunosResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* AlunosResponse::release_status() {
  // @@protoc_insertion_point(field_release:AlunosResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* AlunosResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AlunosResponse.status)
  return status_;
}
inline void AlunosResponse::set_allocated_status(::ResponseStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:AlunosResponse.status)
}

// repeated .Aluno alunos = 2;
inline int AlunosResponse::alunos_size() const {
  return alunos_.size();
}
inline void AlunosResponse::clear_alunos() {
  alunos_.Clear();
}
inline ::Aluno* AlunosResponse::mutable_alunos(int index) {
  // @@protoc_insertion_point(field_mutable:AlunosResponse.alunos)
  return alunos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Aluno >*
AlunosResponse::mutable_alunos() {
  // @@protoc_insertion_point(field_mutable_list:AlunosResponse.alunos)
  return &alunos_;
}
inline const ::Aluno& AlunosResponse::alunos(int index) const {
  // @@protoc_insertion_point(field_get:AlunosResponse.alunos)
  return alunos_.Get(index);
}
inline ::Aluno* AlunosResponse::add_alunos() {
  // @@protoc_insertion_point(field_add:AlunosResponse.alunos)
  return alunos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Aluno >&
AlunosResponse::alunos() const {
  // @@protoc_insertion_point(field_list:AlunosResponse.alunos)
  return alunos_;
}

// -------------------------------------------------------------------

// DisciplinaRequest

// .Curso curso = 1;
inline bool DisciplinaRequest::has_curso() const {
  return this != internal_default_instance() && curso_ != nullptr;
}
inline void DisciplinaRequest::clear_curso() {
  if (GetArenaNoVirtual() == nullptr && curso_ != nullptr) {
    delete curso_;
  }
  curso_ = nullptr;
}
inline const ::Curso& DisciplinaRequest::curso() const {
  const ::Curso* p = curso_;
  // @@protoc_insertion_point(field_get:DisciplinaRequest.curso)
  return p != nullptr ? *p : *reinterpret_cast<const ::Curso*>(
      &::_Curso_default_instance_);
}
inline ::Curso* DisciplinaRequest::release_curso() {
  // @@protoc_insertion_point(field_release:DisciplinaRequest.curso)
  
  ::Curso* temp = curso_;
  curso_ = nullptr;
  return temp;
}
inline ::Curso* DisciplinaRequest::mutable_curso() {
  
  if (curso_ == nullptr) {
    auto* p = CreateMaybeMessage<::Curso>(GetArenaNoVirtual());
    curso_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DisciplinaRequest.curso)
  return curso_;
}
inline void DisciplinaRequest::set_allocated_curso(::Curso* curso) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete curso_;
  }
  if (curso) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      curso = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, curso, submessage_arena);
    }
    
  } else {
    
  }
  curso_ = curso;
  // @@protoc_insertion_point(field_set_allocated:DisciplinaRequest.curso)
}

// -------------------------------------------------------------------

// DisciplinaResponse

// .Curso curso = 1;
inline bool DisciplinaResponse::has_curso() const {
  return this != internal_default_instance() && curso_ != nullptr;
}
inline void DisciplinaResponse::clear_curso() {
  if (GetArenaNoVirtual() == nullptr && curso_ != nullptr) {
    delete curso_;
  }
  curso_ = nullptr;
}
inline const ::Curso& DisciplinaResponse::curso() const {
  const ::Curso* p = curso_;
  // @@protoc_insertion_point(field_get:DisciplinaResponse.curso)
  return p != nullptr ? *p : *reinterpret_cast<const ::Curso*>(
      &::_Curso_default_instance_);
}
inline ::Curso* DisciplinaResponse::release_curso() {
  // @@protoc_insertion_point(field_release:DisciplinaResponse.curso)
  
  ::Curso* temp = curso_;
  curso_ = nullptr;
  return temp;
}
inline ::Curso* DisciplinaResponse::mutable_curso() {
  
  if (curso_ == nullptr) {
    auto* p = CreateMaybeMessage<::Curso>(GetArenaNoVirtual());
    curso_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DisciplinaResponse.curso)
  return curso_;
}
inline void DisciplinaResponse::set_allocated_curso(::Curso* curso) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete curso_;
  }
  if (curso) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      curso = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, curso, submessage_arena);
    }
    
  } else {
    
  }
  curso_ = curso;
  // @@protoc_insertion_point(field_set_allocated:DisciplinaResponse.curso)
}

// repeated .Disciplina disciplinas = 2;
inline int DisciplinaResponse::disciplinas_size() const {
  return disciplinas_.size();
}
inline void DisciplinaResponse::clear_disciplinas() {
  disciplinas_.Clear();
}
inline ::Disciplina* DisciplinaResponse::mutable_disciplinas(int index) {
  // @@protoc_insertion_point(field_mutable:DisciplinaResponse.disciplinas)
  return disciplinas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Disciplina >*
DisciplinaResponse::mutable_disciplinas() {
  // @@protoc_insertion_point(field_mutable_list:DisciplinaResponse.disciplinas)
  return &disciplinas_;
}
inline const ::Disciplina& DisciplinaResponse::disciplinas(int index) const {
  // @@protoc_insertion_point(field_get:DisciplinaResponse.disciplinas)
  return disciplinas_.Get(index);
}
inline ::Disciplina* DisciplinaResponse::add_disciplinas() {
  // @@protoc_insertion_point(field_add:DisciplinaResponse.disciplinas)
  return disciplinas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Disciplina >&
DisciplinaResponse::disciplinas() const {
  // @@protoc_insertion_point(field_list:DisciplinaResponse.disciplinas)
  return disciplinas_;
}

// .ResponseStatus status = 3;
inline bool DisciplinaResponse::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline void DisciplinaResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::ResponseStatus& DisciplinaResponse::status() const {
  const ::ResponseStatus* p = status_;
  // @@protoc_insertion_point(field_get:DisciplinaResponse.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::ResponseStatus*>(
      &::_ResponseStatus_default_instance_);
}
inline ::ResponseStatus* DisciplinaResponse::release_status() {
  // @@protoc_insertion_point(field_release:DisciplinaResponse.status)
  
  ::ResponseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::ResponseStatus* DisciplinaResponse::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResponseStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DisciplinaResponse.status)
  return status_;
}
inline void DisciplinaResponse::set_allocated_status(::ResponseStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:DisciplinaResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NotaRequest_OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NotaRequest_OperationType>() {
  return ::NotaRequest_OperationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_red_2eproto
